// <auto-generated />
using System;
using FileManagement.Database.SqLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileManagement.Database.SqLite.Migrations
{
    [DbContext(typeof(FileManagementContext))]
    partial class FileManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("NOCASE")
                .HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("FileManagement.Directory", b =>
                {
                    b.Property<int>("DirectoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DirectoryPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("DriveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DriveLetter")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Exists")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsBackupLocation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ShouldMonitorFiles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("DirectoryId")
                        .HasName("PK_Directories");

                    b.HasIndex("DriveId");

                    b.ToTable("Directories", (string)null);
                });

            modelBuilder.Entity("FileManagement.Drive", b =>
                {
                    b.Property<int>("DriveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DriveFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("DriveLetter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DriveType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HardwareSerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineNames")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TotalFreeSpace")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VolumeLabel")
                        .HasColumnType("TEXT");

                    b.Property<string>("VolumeSerialNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("DriveId")
                        .HasName("PK_Drives");

                    b.HasIndex("VolumeSerialNumber")
                        .IsUnique();

                    b.ToTable("Drives", (string)null);
                });

            modelBuilder.Entity("FileManagement.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attributes")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("Crc32")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateCreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateDeletedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateRetention")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectoryPath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DriveId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DriveLetter")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Exists")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("FileId")
                        .HasName("PK_Files");

                    b.HasIndex("Crc32");

                    b.HasIndex("DriveId");

                    b.HasIndex("FileName");

                    b.HasIndex("HashCode");

                    b.HasIndex("DirectoryPath", "FileName", "DriveId")
                        .IsUnique();

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("FileManagement.FileDuplicates", b =>
                {
                    b.Property<int>("FirstId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AreDuplicates")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("FirstIsABackup")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("SecondIsABackup")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("FirstId", "SecondId")
                        .HasName("PK_FileDuplicates");

                    b.HasIndex("SecondId");

                    b.ToTable("FileDuplicates", null, t =>
                        {
                            t.HasCheckConstraint("Ck_FileDuplicates_IdOrder", "FirstId < SecondId");
                        });
                });

            modelBuilder.Entity("FileManagement.Directory", b =>
                {
                    b.HasOne("FileManagement.Drive", "Drive")
                        .WithMany("Directories")
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("FileManagement.File", b =>
                {
                    b.HasOne("FileManagement.Drive", "Drive")
                        .WithMany()
                        .HasForeignKey("DriveId");

                    b.Navigation("Drive");
                });

            modelBuilder.Entity("FileManagement.FileDuplicates", b =>
                {
                    b.HasOne("FileManagement.File", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileManagement.File", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("FileManagement.Drive", b =>
                {
                    b.Navigation("Directories");
                });
#pragma warning restore 612, 618
        }
    }
}
